{"version":3,"sources":["index.js"],"names":["log","logger","argv","minimist","process","slice","info","loadFileConfig","file","readFileAsync","path","resolve","cwd","then","data","JSON","parse","Promise","config","connection","Object","assign","protocol","env","RCLI_PROTOCOL","RCLI_ENV","host","RCLI_HOST","username","RCLI_USERNAME","password","RCLI_PASSWORD","actionName","_","actionTask","getServiceByPath","service","restart","getContainers","containers","all","map","container","getContainerByHostAndName","reject","console","err"],"mappings":";;AAAA;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;AAEA,IAAMA,MAAMC,sBAAO,oBAAPA,CAAZ;AACA,IAAMC,OAAOC,wBAASC,QAAQF,IAARE,CAAaC,KAAbD,CAAmB,CAAnBA,CAATD,CAAb;;AAEAH,IAAIM,IAAJN,CAAS,MAATA,EAAiBE,IAAjBF;;AAEA,SAASO,cAAT,GAA0B;AACxB,MAAIL,KAAKM,IAAT,EAAe;AACb,WAAOC,uBAAcC,eAAKC,OAALD,CAAaN,QAAQQ,GAARR,EAAbM,EAA4BR,KAAKM,IAAjCE,CAAdD,EACJI,IADIJ,CACC,UAACK,IAAD;AAAA,aAAUC,KAAKC,KAALD,CAAWD,IAAXC,CAAV;AAAA,KADDN,CAAP;AAEF;AACA,SAAOQ,QAAQN,OAARM,CAAgB,EAAhBA,CAAP;AACF;;AAEAV,iBAAiBM,IAAjBN,CAAsB,UAACW,MAAD,EAAY;AAChC,MAAMC,aAAaC,OAAOC,MAAPD,CAAc;AAC/BE,cAAUlB,QAAQmB,GAARnB,CAAYoB,aADS;AAE/BD,SAAKnB,QAAQmB,GAARnB,CAAYqB,QAFc;AAG/BC,UAAMtB,QAAQmB,GAARnB,CAAYuB,SAHa;AAI/BC,cAAUxB,QAAQmB,GAARnB,CAAYyB,aAJS;AAK/BC,cAAU1B,QAAQmB,GAARnB,CAAY2B;AALS,GAAdX,EAMhBF,MANgBE,EAMRlB,IANQkB,CAAnB;AAOA,MAAMG,MAAM,4BAAgBJ,UAAhB,EAA4BA,WAAWI,GAAvC,CAAZ;AACA,MAAMS,aAAa9B,KAAK+B,CAAL/B,CAAO,CAAPA,CAAnB;AACA,MAAMgC,aAAahC,KAAK+B,CAAL/B,CAAO,CAAPA,CAAnB;AACA,UAAQ8B,UAAR;AACE,SAAK,SAAL;AACE,UAAMtB,QAAOR,KAAK+B,CAAL/B,CAAO,CAAPA,CAAb;AACA,cAAQgC,UAAR;AACE,aAAK,SAAL;AACE,iBAAOX,IAAIY,gBAAJZ,CAAqBb,KAArBa,EACJV,IADIU,CACC,UAACa,OAAD;AAAA,mBAAaA,QAAQC,OAARD,EAAb;AAAA,WADDb,CAAP,CAFJ,CAG2C;AACzC,aAAK,oBAAL;AACE,iBAAOA,IAAIY,gBAAJZ,CAAqBb,KAArBa,EACJV,IADIU,CACC,UAACa,OAAD;AAAA,mBAAaA,QAAQE,aAARF,GAChBvB,IADgBuB,CACX,UAACG,UAAD;AAAA,qBAAgBtB,QAAQuB,GAARvB,CAAYsB,WAAWE,GAAXF,CAAe,UAACG,SAAD;AAAA,uBAAeA,UAAUL,OAAVK,EAAf;AAAA,eAAfH,CAAZtB,CAAhB;AAAA,aADWmB,CAAb;AAAA,WADDb,CAAP;AALJ;AASA;AACF,SAAK,WAAL;AACE,cAAQW,UAAR;AACE,aAAK,SAAL;AACE,cAAMR,OAAOxB,KAAK+B,CAAL/B,CAAO,CAAPA,CAAb;AACA,cAAMwC,YAAYxC,KAAK+B,CAAL/B,CAAO,CAAPA,CAAlB;AACA,iBAAOqB,IAAIoB,yBAAJpB,CAA8BG,IAA9BH,EAAoCmB,SAApCnB,EACLV,IADKU,CACA,UAACmB,SAAD;AAAA,mBAAeA,UAAUL,OAAVK,EAAf;AAAA,WADAnB,CAAP;AAJJ;AAOA;AArBJ;AAuBA,SAAON,QAAQ2B,MAAR3B,CAAe,mBAAfA,CAAP;AACD,CAnCDV,EAmCGM,IAnCHN,CAmCQ,YAAM;AACZsC,UAAQ7C,GAAR6C,CAAY,qCAAZA;AACD,CArCDtC,EAqCG,UAACuC,GAAD,EAAS;AACVD,UAAQ7C,GAAR6C,CAAY,uBAAZA,EAAqCC,GAArCD;AACD,CAvCDtC","file":"index.js","sourcesContent":["import {readFileAsync} from \"utils/fs\";\r\nimport path from \"path\";\r\nimport minimist from \"minimist\";\r\nimport {Environment} from \"rancher-lib\";\r\nimport logger from \"utils/logger\";\r\n\r\nconst log = logger(\"rancher-cli:index:\");\r\nconst argv = minimist(process.argv.slice(2));\r\n\r\nlog.info(\"args\", argv);\r\n\r\nfunction loadFileConfig() {\r\n  if (argv.file) {\r\n    return readFileAsync(path.resolve(process.cwd(), argv.file))\r\n      .then((data) => JSON.parse(data));\r\n  }\r\n  return Promise.resolve({});\r\n}\r\n\r\nloadFileConfig().then((config) => {\r\n  const connection = Object.assign({\r\n    protocol: process.env.RCLI_PROTOCOL,\r\n    env: process.env.RCLI_ENV,\r\n    host: process.env.RCLI_HOST,\r\n    username: process.env.RCLI_USERNAME,\r\n    password: process.env.RCLI_PASSWORD,\r\n  }, config, argv);\r\n  const env = new Environment(connection, connection.env);\r\n  const actionName = argv._[0];\r\n  const actionTask = argv._[1];\r\n  switch (actionName) {\r\n    case \"service\":\r\n      const path = argv._[2];\r\n      switch (actionTask) {\r\n        case \"restart\":\r\n          return env.getServiceByPath(path)\r\n            .then((service) => service.restart()); //BUG: this does not always seem to work\r\n        case \"restart-containers\":\r\n          return env.getServiceByPath(path)\r\n            .then((service) => service.getContainers()\r\n              .then((containers) => Promise.all(containers.map((container) => container.restart()))));\r\n      }\r\n      break;\r\n    case \"container\":\r\n      switch (actionTask) {\r\n        case \"restart\":\r\n          const host = argv._[2];\r\n          const container = argv._[3];\r\n          return env.getContainerByHostAndName(host, container)\r\n           .then((container) => container.restart());\r\n      }\r\n      break;\r\n  }\r\n  return Promise.reject(\"Command not found\");\r\n}).then(() => {\r\n  console.log(\"Task has been completed successfuly\");\r\n}, (err) => {\r\n  console.log(\"An error has occurred\", err);\r\n});\r\n"]}